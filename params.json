{"name":"Datatablejs","tagline":"A library for manipulating and filtering tabular data","body":"# [DatatableJs](https://github.com/mkenney/DatatableJs)\r\n\r\nDatatableJs is a library for manipulating and filtering tabular data.  I use this\r\na lot in various UIs and have found many convenient ways to use this to manipulate\r\ninterface elements as well as tabular data.\r\n\r\nThis implements a stable sort hack to allow for multi-column sort operations using\r\nthe native sorting algorithm, I did not implement a sort in the code.  Instead, I\r\ncreate a position flag on the row objects.  As a result, `__pos__` is a \"reserved\"\r\ncolumn name and any data stored there will be overwritten.\r\n\r\n## Table of contents\r\n\r\n- [Quick start](#quick-start)\r\n- [Bugs and feature requests](#bugs-and-feature-requests)\r\n- [Documentation](#documentation)\r\n- [Examples](#examples)\r\n- [Contributing](#contributing)\r\n- [Versioning](#versioning)\r\n- [Creator](#creator)\r\n- [Copyright and license](#copyright-and-license)\r\n\r\n## Quick start\r\n\r\n- Clone the repo: `git clone https://github.com/mkenney/DatatableJs.git`.\r\n\r\n### What's included\r\n\r\nWithin the repository you'll find a directory and file structure similar to this:\r\n```\r\nDatatableJs/\r\n    │\r\n    ├── src/\r\n    │   └──js/\r\n    │       ├── Column.js\r\n    │       ├── Data.js\r\n    │       ├── DatatableJs.js\r\n    │       ├── Exception.js\r\n    │       ├── Iterator.js\r\n    │       └── Schema.js\r\n    │\r\n    └── assets/\r\n        └──js/\r\n            ├── DatatableJs.js\r\n            ├── DatatableJs.map\r\n            └── DatatableJs.min.js\r\n```\r\n\r\nThe compiled file (`DatatableJs.js`) and [source map](https://developers.google.com/chrome-developer-tools/docs/css-preprocessors)\r\n(`DatatableJs.map`) are located in the assets/ directory and are available for use\r\nwith certain browsers' developer tools.\r\n\r\n## Bugs and feature requests\r\n\r\nIf you find a bug or have a feature request [please open a new issue](#contributing).\r\n\r\n\r\n## Documentation\r\n\r\nDatatableJs creates a new global object `DatatableJs`, all support objects are\r\nlocated in the `DatatableJs.lib` namespace:\r\n\r\n```javascript\r\nvar schema = new DatatableJs.lib.Schema();\r\n```\r\n\r\n### DatatableJs API:\r\n\r\n```javascript\r\n/**\r\n * Get the current DatatableJs.lib.Data instance\r\n *\r\n * If an instance doesn't exist or is invalid one will be created\r\n *\r\n * @return {DatatableJs.lib.Data}\r\n */\r\nDatatableJs.prototype.getData\r\n\r\n/**\r\n * Set the current DatatableJs.lib.Data instance\r\n *\r\n * @param  {DatatableJs.lib.Data} data\r\n * @return {DatatableJs}\r\n */\r\nDatatableJs.prototype.setData\r\n\r\n/**\r\n * Get the current set of data rows\r\n *\r\n * @return {Array}\r\n */\r\nDatatableJs.prototype.getRows\r\n\r\n/**\r\n * Replace the current data set with an array of data rows\r\n *\r\n * @param  {Array} rows\r\n * @return {DatatableJs}\r\n */\r\nDatatableJs.prototype.setRows\r\n\r\n/**\r\n * Get the current DatatableJs.lib.Schema instance\r\n *\r\n * If an instance doesn't exist or is invalid one will be created\r\n *\r\n * @return {DatatableJs.lib.Schema}\r\n */\r\nDatatableJs.prototype.getSchema\r\n\r\n/**\r\n * Set the current DatatableJs.lib.Schema instance\r\n *\r\n * @param  {DatatableJs.lib.Schema} schema\r\n * @return {DatatableJs}\r\n */\r\nDatatableJs.prototype.setSchema\r\n\r\n/**\r\n * Generate an iterator instance linked to the current schema and data references\r\n *\r\n * @return {DatatableJs.lib.Iterator}\r\n */\r\nDatatableJs.prototype.createIterator\r\n```\r\n\r\n### DatatableJs.lib.Schema API:\r\n\r\n```javascript\r\n/**\r\n * Get current column definitions\r\n *\r\n * @return {Object}\r\n */\r\nSchema.prototype.getColumns\r\n\r\n/**\r\n * Set or extend current column definitions\r\n *\r\n * This does not replace the current column definitions, it only extends and\r\n * updates\r\n *\r\n * @param  {Array} columns An array of column definition objects\r\n * @return {DatatableJs.lib.Schema}\r\n */\r\nSchema.prototype.setColumns\r\n\r\n/**\r\n * Get a column definition by name\r\n *\r\n * @param  {String} column_name\r\n * @return {Object|undefined} The schema definition for the specified column, else undefined\r\n */\r\nSchema.prototype.getColumn\r\n\r\n/**\r\n * Delete a column definition by name\r\n *\r\n * @param  {String} column_name\r\n * @return {DatatableJs.lib.Schema}\r\n */\r\nSchema.prototype.deleteColumn\r\n\r\n/**\r\n * Update or add a named column definition\r\n *\r\n * @param {String} column_name\r\n * @param {Object} column_definition\r\n * @return {DatatableJs.lib.Schema}\r\n */\r\nSchema.prototype.setColumn\r\n\r\n/**\r\n * Test a row of data to see if it meets requirements for this schema definition\r\n *\r\n * @param  {Object}  row A single data row\r\n * @return {Boolean}\r\n */\r\nSchema.prototype.isValidRow\r\n\r\n/**\r\n * Test an individual piece of data to see if meets requirements for a specified\r\n * column\r\n *\r\n * @param  {String}  column\r\n * @param  {mixed}   value\r\n * @return {Boolean}\r\n */\r\nSchema.prototype.isValidData\r\n```\r\n\r\n### DatatableJs.lib.Column API:\r\n\r\n```javascript\r\n/**\r\n * Get a column property\r\n *\r\n * @param  {String} field\r\n * @return {mixed}\r\n */\r\nColumn.prototype.get\r\n\r\n/**\r\n * Set a column property\r\n *\r\n * @param  {String} field\r\n * @param  {mixed}  value\r\n * @return {DatatableJs.lib.Column}\r\n */\r\nColumn.prototype.set\r\n\r\n/**\r\n * Get the full definition object for this column\r\n *\r\n * @return {Object}\r\n */\r\nColumn.prototype.getDefinition\r\n\r\n/**\r\n * Extend the current column definition\r\n *\r\n * @param  {Object} column_definition\r\n * @return {DatatableJs.lib.Column}\r\n */\r\nColumn.prototype.setDefinition\r\n```\r\n\r\n### DatatableJs.lib.Data API:\r\n\r\n```javascript\r\n/**\r\n * Get the current set of data rows\r\n *\r\n * @return  {Array}\r\n */\r\nData.prototype.getRows\r\n\r\n/**\r\n * Replace the current data set with an array of data rows\r\n *\r\n * @param  {Array} rows\r\n * @return {DatatableJs.lib.Data}\r\n */\r\nData.prototype.setRows\r\n\r\n/**\r\n * Add a row to the current dataset\r\n *\r\n * If a schema is available, validate the row data.  Add support properties for\r\n * the stable sort implementation.\r\n *\r\n * @param  {Object} row\r\n * @return {DatatableJs.lib.Data}\r\n */\r\nData.prototype.addRow\r\n\r\n/**\r\n * Get the current DatatableJs.lib.Schema instance\r\n *\r\n * If an instance doesn't exist or is invalid one will be created\r\n *\r\n * @return {DatatableJs.lib.Schema}\r\n */\r\nData.prototype.getSchema\r\n\r\n/**\r\n * Set the current DatatableJs.lib.Schema instance\r\n *\r\n * @param  {DatatableJs.lib.Schema} schema\r\n * @return {DatatableJs.lib.Data}\r\n */\r\nData.prototype.setSchema\r\n\r\n/**\r\n * Sort the data.\r\n *\r\n * This implements a stable multi-sort algorithm\r\n *\r\n * @param  {String}          column      The column to sort on\r\n * @param  {String}          direction   Optional, the sort direction, either\r\n *                                       'asc' or 'desc'\r\n * @param  {Function|String} comparator  Optional, a method to use when comparing\r\n *                                       values for sorting\r\n *                                           - function(a, b) {} // A custom comparison function that\r\n *                                                               // compares two values for a match,\r\n *                                                               // return -1, 0 or 1\r\n * @param  {Function}        transformer A function to use to transform values prior to the sort\r\n *                                       comparison (stripping HTML, typecasting, etc.)\r\n * @return {DatatableJs.lib.Data}\r\n */\r\nData.prototype.sort\r\n\r\n/**\r\n * Empty the data set by setting the data rows to an empty array and unsetting sort flags\r\n *\r\n * @return {DatatableJs.lib.Data}\r\n */\r\nData.prototype.truncate\r\n```\r\n\r\n### DatatableJs.lib.Iterator API:\r\n\r\n```javascript\r\n/**\r\n * Get the current DatatableJs.lib.Data instance\r\n *\r\n * If an instance doesn't exist or is invalid one will be created\r\n *\r\n * @return {DatatableJs.lib.Data}\r\n */\r\nIterator.prototype.getData\r\n\r\n/**\r\n * Set the current DatatableJs.lib.Data reference\r\n *\r\n * @param  {DatatableJs.lib.Data}   data\r\n * @return {DatatableJs.lib.Iterator}\r\n */\r\nIterator.prototype.setData\r\n\r\n/**\r\n * Get the current set of data rows\r\n *\r\n * @return {Array}\r\n */\r\nIterator.prototype.getRows\r\n\r\n/**\r\n * Replace the current data set with an array of data rows\r\n *\r\n * @param  {Array} rows\r\n * @return {DatatableJs.lib.Iterator}\r\n */\r\nIterator.prototype.setRows\r\n\r\n/**\r\n * Get the current DatatableJs.lib.Schema instance\r\n *\r\n * If an instance doesn't exist or is invalid one will be created\r\n *\r\n * @return {DatatableJs.lib.Schema}\r\n */\r\nIterator.prototype.getSchema\r\n\r\n/**\r\n * Set the current DatatableJs.lib.Schema instance\r\n *\r\n * @param  {DatatableJs.lib.Schema} schema\r\n * @return {DatatableJs.lib.Iterator}\r\n */\r\nIterator.prototype.setSchema\r\n```\r\n\r\n## Examples\r\n\r\nThe following examples will reference this schema and data set:\r\n\r\n```javascript\r\n// The schema defines requirements and default options for a data property.  When\r\n// a schema us used, the datatable will reject any object that has a property that\r\n// doesn't conform to the requirements it defines.\r\n//\r\n// A schema can be applied at any time, even after data has been imported.\r\n// Non-conforming rows will be removed from the data set when it is applied\r\nvar sample_schema = {\r\n\r\n    // The key identifies a property expected in the data set\r\n    id: {\r\n\r\n        // Optional\r\n        //\r\n        // Strings or function references for native types:\r\n        //     'Number' or Number to require numbers for example.  Does smart\r\n        //     type checking so in this case 1 or Number(1) or new Number(1) would\r\n        //     qualify but NaN would not\r\n        //\r\n        // Functions or even instances for custom objects\r\n        //     DatatableJs for example\r\n        type: Number\r\n\r\n        // Optional, Boolean, default true.\r\n        //\r\n        // If true or omitted allow null, undefined and omitted values. If false,\r\n        // reject rows containing null, undefined or omitted values for this\r\n        // property.\r\n        , nullable: false\r\n\r\n        // Optional, default custom comparator function to use when sorting this\r\n        // column.  This value is not used if a comparitor function is defined\r\n        // when calling addSortRule() on an iterator instance.\r\n        , sort_comparator: undefined\r\n\r\n        // Optional, default data transformer function to use when before sorting\r\n        // the data in this column.  This value is not used if a transformer\r\n        // function is defined when calling addSortRule() on an iterator instance.\r\n        , sort_transformer: undefined\r\n\r\n        // Optional, default sort direction for this column.  This value is not\r\n        // used if a sort_direction defined when calling addSortRule() on an\r\n        // iterator instance.\r\n        , sort_direction:   'desc'\r\n    }\r\n    , col1: {\r\n        sort_direction: 'asc'\r\n    }\r\n    , col2: {\r\n        nullable: true\r\n        , sort_direction: 'asc'\r\n    }\r\n}\r\n\r\n\r\n// Data can be any array of objects\r\nvar sample_data = [\r\n    { id: undefined,  col1: 0,   col2: 0 },\r\n    { id: null,       col1: 1,   col2: 1 },\r\n    { id: '3',        col1: 2,   col2: 0 },\r\n    { id: 4,          col1: 0,   col2: undefined },\r\n    { id: 5,          col1: 1,   col2: null },\r\n    { id: 6,          col1: 2,   col2: 1 },\r\n    { id: 7,          col1: '0', col2: 0 },\r\n    { id: 8,          col1: '1', col2: 1 },\r\n    { id: 9,          col1: '2', col2: 0 },\r\n\r\n    { id: 11,         col1: 0,   col2: 0 },\r\n    { id: 12,         col1: 1,   col2: 1 },\r\n    { id: 13,         col1: 2,   col2: 0 },\r\n    { id: 14,         col1: 0,   col2: 1 },\r\n    { id: 15,         col1: 1,   col2: 0 },\r\n    { id: 16,         col1: 2,   col2: 1 },\r\n    { id: 17,         col1: 0,   col2: 0 },\r\n    { id: 18,         col1: 1,   col2: 1 },\r\n    { id: 19,         col1: 2,   col2: 0 },\r\n\r\n    { id: 21,         col1: 0,   col2: 0 },\r\n    { id: 22,         col1: 1,   col2: 1 },\r\n    { id: 23,         col1: 2,   col2: 0 },\r\n    { id: 24,         col1: 0,   col2: 1 },\r\n    { id: 25,         col1: 1,   col2: 0 },\r\n    { id: 26,         col1: 2,   col2: 1 },\r\n    { id: 27,         col1: 0,   col2: 0 },\r\n    { id: 28,         col1: 1,   col2: 1 },\r\n    { id: 29,         col1: 2,   col2: 0 }\r\n];\r\n```\r\n\r\n### Example 1\r\n\r\nLoop through the data\r\n\r\n```javascript\r\nvar datatable = new DatatableJs({data: sample_data});\r\nvar iterator = datatable.createIterator();\r\nvar row;\r\nwhile (row = iterator.next()) {\r\n    console.log(row.id, row.col1, row.col2);\r\n}\r\n\r\n// OUTPUT:\r\n// undefined 0 0\r\n// null 1 1\r\n// 3 2 0\r\n// 4 0 undefined\r\n// 5 1 null\r\n// 6 2 1\r\n// 7 \"0\" 0\r\n// 8 \"1\" 1\r\n// 9 \"2\" 0\r\n// 11 0 0\r\n// 12 1 1\r\n// 13 2 0\r\n// 14 0 1\r\n// 15 1 0\r\n// 16 2 1\r\n// 17 0 0\r\n// 18 1 1\r\n// 19 2 0\r\n// 21 0 0\r\n// 22 1 1\r\n// 23 2 0\r\n// 24 0 1\r\n// 25 1 0\r\n// 26 2 1\r\n// 27 0 0\r\n// 28 1 1\r\n// 29 2 0\r\n```\r\n\r\n### Example 2\r\n\r\nApply a data schema\r\n\r\n```javascript\r\nvar datatable = new DatatableJs({\r\n    schema: sample_schema,\r\n    data: sample_data\r\n});\r\nvar iterator = datatable.createIterator();\r\nvar row;\r\nwhile (row = iterator.next()) {\r\n    console.log(row.id, row.col1, row.col2);\r\n}\r\n\r\n// OUTPUT:\r\n// DatatableJs - Could not import row: \"id\" value is invalid undefined Object {type: function, nullable: false, sort_comparator: undefined, sort_transformer: undefined, sort_direction: \"desc\"}\r\n// DatatableJs - Could not import row: \"id\" value is invalid null Object {type: function, nullable: false, sort_comparator: undefined, sort_transformer: undefined, sort_direction: \"desc\"}\r\n// DatatableJs - Could not import row: \"id\" value is invalid 3 Object {type: function, nullable: false, sort_comparator: undefined, sort_transformer: undefined, sort_direction: \"desc\"}\r\n// DatatableJs - 3 of 27 data rows were invalid\r\n// 4 0 undefined\r\n// 5 1 null\r\n// 6 2 1\r\n// 7 \"0\" 0\r\n// 8 \"1\" 1\r\n// 9 \"2\" 0\r\n// 11 0 0\r\n// 12 1 1\r\n// 13 2 0\r\n// 14 0 1\r\n// 15 1 0\r\n// 16 2 1\r\n// 17 0 0\r\n// 18 1 1\r\n// 19 2 0\r\n// 21 0 0\r\n// 22 1 1\r\n// 23 2 0\r\n// 24 0 1\r\n// 25 1 0\r\n// 26 2 1\r\n// 27 0 0\r\n// 28 1 1\r\n// 29 2 0\r\n```\r\n\r\n### Example 3\r\n\r\nFilter the data\r\n\r\n```javascript\r\nvar datatable = new DatatableJs({data: sample_data});\r\nvar iterator = datatable.createIterator();\r\niterator.addFilterRule({\r\n    fields: 'id',\r\n    comparators: '>',\r\n    values: 10\r\n});\r\nvar row;\r\nwhile (row = iterator.next()) {\r\n    console.log(row.id, row.col1, row.col2);\r\n}\r\n\r\n// OUTPUT:\r\n// 11 0 0\r\n// 12 1 1\r\n// 13 2 0\r\n// 14 0 1\r\n// 15 1 0\r\n// 16 2 1\r\n// 17 0 0\r\n// 18 1 1\r\n// 19 2 0\r\n// 21 0 0\r\n// 22 1 1\r\n// 23 2 0\r\n// 24 0 1\r\n// 25 1 0\r\n// 26 2 1\r\n// 27 0 0\r\n// 28 1 1\r\n// 29 2 0\r\n```\r\n\r\n### Example 4\r\n\r\nSort the data\r\n\r\n```javascript\r\nvar datatable = new DatatableJs({data: sample_data});\r\nvar iterator = datatable.createIterator();\r\niterator.addSortRule({\r\n    column: 'col1',\r\n    direction: 'desc',\r\n    comparator: function(a, b) {\r\n        if (a == b) {return 0;}\r\n        if (a > b) {return 1;}\r\n        return -1;\r\n    },\r\n    transformer: function(a) {return Number(a);}\r\n});\r\niterator.addSortRule({\r\n    column: 'col2'\r\n});\r\nvar row;\r\nwhile (row = iterator.next()) {\r\n    console.log(row.id, row.col1, row.col2);\r\n}\r\n\r\n// OUTPUT: - Note, null and undefined are automatically sorted to the bottom by default.\r\n// undefined 0 0\r\n// 11 0 0\r\n// 17 0 0\r\n// 7 \"0\" 0\r\n// 21 0 0\r\n// 27 0 0\r\n// 15 1 0\r\n// 25 1 0\r\n// 3 2 0\r\n// 13 2 0\r\n// 19 2 0\r\n// 23 2 0\r\n// 9 \"2\" 0\r\n// 29 2 0\r\n// 14 0 1\r\n// 24 0 1\r\n// null 1 1\r\n// 12 1 1\r\n// 8 \"1\" 1\r\n// 18 1 1\r\n// 22 1 1\r\n// 28 1 1\r\n// 6 2 1\r\n// 16 2 1\r\n// 26 2 1\r\n// 4 0 undefined\r\n// 5 1 null\r\n```\r\n\r\n### Example 5\r\n\r\nPaginate the data\r\n\r\n```javascript\r\nvar datatable = new DatatableJs({data: sample_data});\r\nvar iterator = datatable.createIterator();\r\niterator.setPaginationRule({\r\n    enabled: true\r\n    , rows_per_page: 10\r\n    , current_page: 2\r\n});\r\nvar row;\r\nwhile (row = iterator.next()) {\r\n    console.log(row.id, row.col1, row.col2);\r\n}\r\n\r\n// OUTPUT:\r\n// 12 1 1\r\n// 13 2 0\r\n// 14 0 1\r\n// 15 1 0\r\n// 16 2 1\r\n// 17 0 0\r\n// 18 1 1\r\n// 19 2 0\r\n// 21 0 0\r\n// 22 1 1\r\n```\r\n\r\nTo iterate through the next (or any) page re-execute the iterator with a page option:\r\n```javascript\r\niterator.execute({page: 3})\r\nwhile (row = iterator.next()) {\r\n    console.log(row.id, row.col1, row.col2);\r\n}\r\n\r\n// OUTPUT:\r\n// 23 2 0\r\n// 24 0 1\r\n// 25 1 0\r\n// 26 2 1\r\n// 27 0 0\r\n// 28 1 1\r\n// 29 2 0\r\n```\r\n\r\n### Example 6\r\n\r\nAll of the filter rules can be combined in any way\r\n\r\n```javascript\r\nvar datatable = new DatatableJs({\r\n    data: sample_data\r\n    , schema: sample_schema\r\n});\r\nvar iterator = datatable.createIterator();\r\n\r\niterator\r\n\r\n    // Individual filter rules perform an 'AND' match between each other, so each\r\n    // row must match all of the filter rules that have been defined\r\n    .addFilterRule({\r\n\r\n        // A single field containing the data to filter on\r\n        fields: 'id'\r\n\r\n        // One or more comparison functions. May be any of:\r\n        //     '>'\r\n        //     '>='\r\n        //     '<'\r\n        //     '<='\r\n        //     '=='\r\n        //     '==='\r\n        //     '!='\r\n        //     '!=='\r\n        //     function(data, value) {} // a custom function comparing the data\r\n        //                              // from the table to the values defined\r\n        //                              // below. Return false to reject rows\r\n        //                              // with the `data` value in them\r\n        , comparators: '>'\r\n\r\n        // A single value to compare the data with\r\n        , values: 10\r\n    })\r\n\r\n    // Multiple matching combinations can be defined in a single filter rule by\r\n    // listing them in an array.  Every filter option will accept an array and\r\n    // check for all possible matches, performing an 'OR' search\r\n    .addFilterRule({\r\n\r\n        // A list of fields containing the data to filter on\r\n        fields: ['col1', 'col2']\r\n\r\n        // A list of comparison methods.  Each one will be tested against the data\r\n        // in all listed fields to see if it matches any listed value.\r\n        , comparators: [\r\n            '='\r\n\r\n            // The first argument is a value from one of the listed fields and\r\n            // the second is a value from the list of values\r\n            , function(data, values) {   // By ignoring the values argument, I can make\r\n                return (1 === data % 2); // this match all odd values as well as 2\r\n            }\r\n        ]\r\n\r\n        // A list of values to compare the data with\r\n        , values: [2]\r\n    })\r\n\r\n    // Sorting accepts four parameters but only the column name is required\r\n    .addSortRule({\r\n\r\n        // The name of the column to sort by\r\n        column: 'col1'\r\n\r\n        // Optional, either 'asc' or 'desc.  If omitted:\r\n        //     - if a schema has been defined for this column and that schema has\r\n        //       a sort_direction defined, sort in that direction and toggle sort\r\n        //       directions on the same column after that\r\n        //     - if a schema has not been defined or does not have a sort_direction\r\n        //       value, sort ascending and toggle sort directions on the same column\r\n        //       after that\r\n        , direction: 'desc'\r\n\r\n        // Optional, a custom function to use for sort comparisons.  Accepts 2 values\r\n        // to compare and returns either -1, 0 or 1.\r\n        //     -1 if a is less than b\r\n        //     0 if a is equal to b\r\n        //     1 if a is greater than b\r\n        // @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\r\n        , comparator: function(a, b) {\r\n            if (a == b) {return 0;}\r\n            if (a > b) {return 1;}\r\n            return -1;\r\n        }\r\n\r\n        // Optional, a custom function to transform values prior to comparison.\r\n        , transformer: function(a) {\r\n            return Number(a); // typecast to catch rows 7 - 9 before they're compared with any of the other values\r\n        }\r\n    })\r\n\r\n    // Any number of sort rules can be added but remember, each one sorts the entire\r\n    // data set which can be noticeably slow with large data sets in a web browser.\r\n    // This will perform a stable multi-column sort of the data.\r\n    .addSortRule({\r\n        column: 'col2'\r\n    })\r\n\r\n    // Only one pagination rule can be used at a time, calling this method again will\r\n    // overwrite the current rule value\r\n    //\r\n    // All parameters are optional and only specified parameters are updated.\r\n    .setPaginationRule({\r\n\r\n        // Boolean, enable or disable pagination\r\n        enabled: true\r\n\r\n        // Number, the page number to return data for\r\n        , current_page: 2\r\n\r\n        // Number, number of filtered rows next() will run through before stopping\r\n        , rows_per_page: 5\r\n    });\r\n\r\nvar row;\r\nwhile (row = iterator.next()) {\r\n    console.log(row.id, row.col1, row.col2);\r\n}\r\n\r\n// OUTPUT:\r\n// DatatableJs - Could not import row: \"id\" value is invalid undefined Object {type: function, nullable: false, sort_comparator: undefined, sort_transformer: undefined, sort_direction: \"desc\"}\r\n// DatatableJs - Could not import row: \"id\" value is invalid null Object {type: function, nullable: false, sort_comparator: undefined, sort_transformer: undefined, sort_direction: \"desc\"}\r\n// DatatableJs - Could not import row: \"id\" value is invalid 3 Object {type: function, nullable: false, sort_comparator: undefined, sort_transformer: undefined, sort_direction: \"desc\"}\r\n// DatatableJs - 3 of 27 data rows were invalid\r\n// 18 1 1\r\n// 22 1 1\r\n// 28 1 1\r\n// 26 2 1\r\n// 16 2 1\r\n```\r\n\r\n### More iterator examples\r\n\r\nIterate through a specific page\r\n\r\n```javascript\r\niterator.setPage(2); // Also supports getPage();\r\niterator.execute();\r\nwhile (var data = iterator.next()) {...}\r\n```\r\n\r\nUpdate the number of rows per page.\r\n\r\n_This always resets the current page to 1_.\r\n\r\n```javascript\r\niterator.setRowsPerPage(25); // Also supports getRowsPerPage();\r\niterator.execute();\r\nwhile (var data = iterator.next()) {...}\r\n```\r\n\r\nEnable or disable pagination.\r\n\r\nIf disabled, the iterator will always loop through the entire data set.\r\n\r\n```javascript\r\niterator.setPaginationEnabled(false); // Also supports getPaginationEnabled();\r\niterator.execute();\r\nwhile (var data = iterator.next()) {...}\r\n```\r\n\r\nIterators now also have a length property that returns the number of iteratable\r\nrows.  This takes all filter definitions into account.\r\n\r\n```javascript\r\niterator.length;\r\n```\r\n\r\n## Contributing\r\n\r\n### Using the issue tracker\r\n\r\nThe [issue tracker](https://github.com/mkenney/DatatableJs/issues) is the preferred\r\nchannel for bug reports, features requests and submitting pull requests, but\r\nplease respect the following restrictions:\r\n\r\n* Please **do not** use the issue tracker for personal support requests.\r\n\r\n* Please **do not** derail or troll issues. Keep the discussion on topic and\r\n    respect the opinions of others.\r\n\r\n#### Bug reports\r\n\r\nA bug is a _demonstrable problem_ that is caused by the code in the repository.\r\nGood bug reports are extremely helpful!\r\n\r\nGuidelines for bug reports:\r\n\r\n0. **Validate and lint your code** - [lint your JS code](http://jshint.com/)\r\n     to ensure your problem isn't caused by an error in your own code.\r\n\r\n1. **[Use the GitHub issue search](https://github.com/mkenney/DatatableJs/issues)**  check if the issue has already been\r\n     reported.\r\n\r\n2. **Check if the issue has been fixed** - try to reproduce it using the\r\n     latest `master` branch in the repository\r\n\r\n3. **Isolate the problem** - ideally create a [reduced test case](http://css-tricks.com/6263-reduced-test-cases/)\r\n     and a [live example](http://jsfiddle.net/).\r\n\r\n\r\nExample:\r\n\r\n> Short and descriptive example bug report title\r\n>\r\n> A summary of the issue and the browser/OS environment in which it occurs. If\r\n> suitable, include the steps required to reproduce the bug.\r\n>\r\n> 1. This is the first step\r\n> 2. This is the second step\r\n> 3. Further steps, etc.\r\n>\r\n> `<url>` - a link to the reduced test case or live example\r\n>\r\n> Any other information you want to share that is relevant to the issue being\r\n> reported. This might include the lines of code that you have identified as\r\n> causing the bug, and potential solutions (and your opinions on their\r\n> merits).\r\n\r\n## Versioning\r\n\r\nFor transparency and in striving to maintain backward compatibility, DatatableJs is\r\nmaintained under [the Semantic Versioning guidelines](http://semver.org/).  I'll\r\nadhere to those rules whenever possible.\r\n\r\n## Creator\r\n\r\n**Michael Kenney**\r\n\r\n- <https://github.com/mkenney>\r\n- <https://www.linkedin.com/in/michaelkenney>\r\n\r\n\r\n## Copyright and license\r\n\r\nCode and documentation copyright 2014-2015 Michael Kenney. Released under\r\n[the MIT license](https://github.com/mkenney/DatatableJs/blob/master/LICENSE).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}